#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <thread>
#include <mutex>
#include <sqlite3.h>
#include <sys/socket.h>
#include <netinet/in.h>
// Порт для подключения клиентов
#define PORT 8080
// Структура, представляющая сообщение
struct Message {
  std::string username;
  std::string content;
  std::string timestamp;
};
// Структура, представляющая клиента
struct Client {
  int socket_fd;
  std::string username;
};
// Глобальные переменные
std::vector<Client> clients;
std::mutex mtx;
std::ofstream logfile;

// Функция для отправки сообщения всем клиентам
void broadcast_message(Message msg) {
  mtx.lock();

  for (Client client : clients) {
    std::string full_message = "[" + msg.timestamp + "] " + msg.username + ": " + msg.content;
    send(client.socket_fd, full_message.c_str(), full_message.length(), 0);
  }


  // Записываем сообщение в лог-файл
  logfile << "[" << msg.timestamp << "] " << msg.username << ": " << msg.content << std::endl;


  mtx.unlock();
}



void handle_new_client(int socket_fd) {

  char buffer[1024] = {0};
  recv(socket_fd, buffer, 1024, 0);
  std::string username(buffer);


 
  Client client;
  client.socket_fd = socket_fd;
  client.username = username;
  clients.push_back(client);


  Message welcome_msg;
  welcome_msg.username = "Server";
  welcome_msg.content = "Welcome, " + username + "!";
  welcome_msg.timestamp = "now";
  broadcast_message(welcome_msg);
  
  while (true) {
    
    char buffer[1024] = {0};
    int valread = recv(socket_fd, buffer, 1024, 0);


    
    if (valread == 0) {
      mtx.lock();
      clients.erase(std::remove_if(clients.begin(), clients.end(), [&socket_fd](Client c){ return c.socket_fd == socket_fd; }), clients.end());
      mtx.unlock();
      break;
    }


    
    sqlite3* db;
    sqlite3_open("chat.db", &db);
    std::string insert_sql = "INSERT INTO messages (username, content, timestamp) VALUES ('" + username + "', '" + std::string(buffer) + "', DATETIME('now'))";
    sqlite3_exec(db, insert_sql.c_str(), NULL, NULL, NULL);
    sqlite3_close(db);


    
    Message msg;
    msg.username = username;
    msg.content = buffer;
    msg.timestamp = "now";
    broadcast_message(msg);
  }
}


// Функция для записи строки логов в файл
void write_log(std::string log_message) {
  mtx.lock();
  logfile << log_message << std::endl;
  mtx.unlock();
}


// Функция для чтения одной строки из файла
std::string read_line(std::string filename, int line_number) {
  std::ifstream file(filename);
  std::string line;
  for (int i = 0; i < line_number; i++) {
    std::getline(file, line);
  }
  return line;
}


int main() {
  // Создаем таблицу messages в базе данных
  sqlite3* db;
  sqlite3_open("chat.db", &db);
  std::string create_table_sql = "CREATE TABLE IF NOT EXISTS messages (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, content TEXT, timestamp DATETIME)";
  sqlite3_exec(db, create_table_sql.c_str(), NULL, NULL, NULL);
  sqlite3_close(db);


  // Открываем лог-файл для записи
  logfile.open("chat.log", std::ios_base::app);


  // Создаем сокет и связываем его с портом
  int server_fd, new_socket;
  struct sockaddr_in address;
  int opt = 1;
  int addrlen = sizeof(address);


  if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
    std::cerr << "Socket creation failed" << std::endl;
    return -1;
  }


  if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
    std::cerr << "Setsockopt failed" << std::endl;
    return -1;
  }


  address.sin_family = AF_INET;
  address.sin_addr.s_addr = INADDR_ANY;
  address.sin_port = htons(PORT);


  if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
    std::cerr << "Bind failed" << std::endl;
    return -1;
  }


  if (listen(server_fd, 3) < 0) {
    std::cerr << "Listen failed" << std::endl;
    return -1;
  }


  // Цикл для обработки подключений новых клиентов
  while (true) {
    if ((new_socket = accept(server_fd, (struct sockaddr )&address, (socklen_t)&addrlen)) < 0) {
      std::cerr << "Accept failed" << std::endl;
      continue;
    }


    std::thread t(handle_new_client, new_socket);
    t.detach();
  }


  // Закрываем лог-файл
  logfile.close();


  return 0;
}
